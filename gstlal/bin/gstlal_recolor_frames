#!/usr/bin/env python
#
# Copyright (C) 2011  Kipp Cannon, Chad Hanna, Drew Keppel
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

from gstlal import pipeparts
from gstlal import reference_psd
from gstlal import simplehandler
from gstlal import datasource
from gstlal import multirate_datasource
from optparse import OptionParser, Option
from glue import segments
from glue.ligolw import ligolw
from glue.ligolw import array
from glue.ligolw import param
array.use_in(ligolw.LIGOLWContentHandler)
param.use_in(ligolw.LIGOLWContentHandler)
from glue.ligolw import utils
from pylal.datatypes import LIGOTimeGPS
from pylal import series as lalseries
import pygtk
pygtk.require("2.0")
import gobject
gobject.threads_init()
import pygst
pygst.require("0.10")
import gst
import sys
import os

parser = OptionParser(description = __doc__)

#
# Append data source options
#

datasource.append_options(parser)

#
# Append program specific options
#

parser.add_option("--output-channel-name", metavar = "name", help = "The name of the channel in the output frames. The default is the same as the channel name")
parser.add_option("--reference-psd", metavar = "name", help = "Set the name of psd xml file to whiten the data with")
parser.add_option("--recolor-psd", metavar = "name", help = "Set the name of psd xml file to recolor the data with")
parser.add_option("--output-path", metavar = "name", default = ".", help = "Path to output frame files (default = \".\").")
parser.add_option("--frame-type", metavar = "name", help = "Frame type, required")
parser.add_option("--frame-duration", metavar = "s", default = 16, type = "int", help = "Set the duration of the output frames.  The duration of the frame file will be multiplied by --frames-per-file.  Default: 16s")
parser.add_option("--frames-per-file", metavar = "n", default = 256, type = "int", help = "Set the number of frames per file.  Default: 256")
parser.add_option("--track-psd", action = "store_true", help = "Calculate PSD from input data and track with time.")
parser.add_option("--shift", metavar = "ns", help = "Number of nanoseconds to delay (negative) or advance (positive) the time stream", type = "int")
parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose (optional).")
parser.add_option("--sample-rate", metavar = "Hz", default = 16384, type = "int", help = "Sample rate at which to generate the data, should be less than or equal to the sample rate of the measured psds provided, default = 16384 Hz")

#
# Parse options
#

options, filenames = parser.parse_args()

if options.frame_type is None:
	raise ValueError("--frame-type is required")

# disable progress reports if not verbose
if not options.verbose:
	pipeparts.mkprogressreport = lambda pipeline, src, *args: src

gw_data_source = datasource.GWDataSourceInfo(options)

# set default output channel if not set by user
if options.output_channel_name is None:
	options.output_channel_name = gw_data_source.channel_dict[instrument]

# don't do injections in mkbasicsrc()
injections, options.injections = options.injections, None

# Assume instrument is the first (only) key of the channel dict
instrument = gw_data_source.channel_dict.keys()[0]

#
# read psd file
#

if options.reference_psd is not None:
	wpsd = lalseries.read_psd_xmldoc(utils.load_filename(options.reference_psd, verbose = options.verbose, contenthandler = ligolw.LIGOLWContentHandler))[instrument]
else:
	wpsd = None
	if options.verbose:
		print >>sys.stderr, "No reference PSD provided, whitening will be done on the fly."
rpsd = lalseries.read_psd_xmldoc(utils.load_filename(options.recolor_psd, verbose = options.verbose, contenthandler = ligolw.LIGOLWContentHandler))[instrument]

#
# Setup the pipeline
#

pipeline = gst.Pipeline(sys.argv[0])
mainloop = gobject.MainLoop()
handler = simplehandler.Handler(mainloop, pipeline)

#
# construct the pipeline framesrc -> shift -> whiten -> firbank (recolor) -> frame sink
#

head = datasource.mkbasicsrc(pipeline, gw_data_source, instrument, verbose = options.verbose)

head = pipeparts.mkprogressreport(pipeline, head, "frames")

if options.shift is not None:
	head = pipeparts.mkshift(pipeline, head, shift = options.shift)
	head = pipeparts.mkprogressreport(pipeline, head, "frames_shifted")

# first whiten and downsample
head = multirate_datasource.mkwhitened_multirate_src(pipeline, head, [options.sample_rate], instrument, psd = wpsd, seekevent = gw_data_source.seekevent, track_psd = options.track_psd)[options.sample_rate]

# Recolor kernel
max_sample = int(round(1.0 / rpsd.deltaF * options.sample_rate / 2.0)) + 1 
# truncate to requested output sample rate, if it is higher than the psd provides an assert will fail later
rpsd.data = 1. / rpsd.data[:max_sample]
fir_matrix, latency, measured_sample_rate = reference_psd.psd_to_fir_kernel(rpsd)
head = pipeparts.mkfirbank(pipeline, head, latency = latency, fir_matrix = [fir_matrix], block_stride = 32 * options.sample_rate)

# put the units back to strain before writing to frames
# Additionally, override the output channel name if provided from the command line
tagstr = "units=strain,channel-name=%s,instrument=%s" % (options.output_channel_name, instrument)
head = pipeparts.mktaginject(pipeline, head, tagstr)

if injections is not None:
	head = pipeparts.mkinjections(pipeline, head, options.injections)

try:
        os.makedirs(options.output_path)
except:
        print >> sys.stderr, "Unable to make directory ", options.output_path
	pass

head = pipeparts.mkchecktimestamps(pipeline, head)
head = pipeparts.mkframecppchannelmux(pipeline, {"%s:%s" % (instrument, options.output_channel_name): head}, frame_duration = options.frame_duration, frames_per_file = options.frames_per_file)
head = pipeparts.mkframecppfilesink(pipeline, head, frame_type = options.frame_type)
head.connect("notify::timestamp", pipeparts.framecpp_filesink_ldas_path_handler, (options.output_path, 5))

#
# Run it
#

if pipeline.set_state(gst.STATE_PLAYING) == gst.STATE_CHANGE_FAILURE:
	raise RuntimeError("pipeline failed to enter PLAYING state")

mainloop.run()

