#!/usr/bin/env python
#
# Copyright (C) 2010  Kipp Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


from optparse import OptionParser
import pygtk
pygtk.require("2.0")
import pygst
pygst.require("0.10")
import gobject
import gst


from gstlal import lloidparts
from gstlal import pipeparts


from glue import segments
from pylal.datatypes import LIGOTimeGPS


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		description = "%prog generates an animated view of the PSD measured from h(t).  The video can be shown on the screen or saved to a OGG Theora movie file.  Example:\n\n%prog \\\n\t--frame-cache \"/home/kipp/scratch_local/874100000-20000/cache/874100000-20000.cache\" \\\n\t--instrument \"H1\" \\\n\t--channel-name \"LSC-STRAIN\" \\\n\t--gps-start-time 874100000.0 \\\n\t--gps-end-time 874120000.0 \\\n\t--psd-fft-length 8.0 \\\n\t--psd-zero-pad-length 0.0 \\\n\t--average-length 64.0 \\\n\t--median-samples 3 \\\n\t--frame-rate 10/1 \\\n\t--output spectrum_movie.ogm \\\n\t--verbose"
	)
	parser.add_option("--frame-cache", metavar = "filename", help = "Set the name of the LAL cache listing the LIGO-Virgo .gwf frame files (optional).  This is required unless --fake-data or --online-data is used in which case it must not be set.")
	parser.add_option("--online-data", action = "store_true", help = "Use online DMT-STRAIN instead of a frame file (optional).")
	parser.add_option("--fake-data", action = "store_true", help = "Instead of reading data from .gwf files, generate and process coloured Gaussian noise modelling the Initial LIGO design spectrum (optional).")
	parser.add_option("--gps-start-time", metavar = "seconds", help = "Set the start time of the segment to analyze in GPS seconds (required).  Can be specified to nanosecond precision.")
	parser.add_option("--gps-end-time", metavar = "seconds", help = "Set the end time of the segment to analyze in GPS seconds (required).  Can be specified to nanosecond precision.")
	parser.add_option("--injections", metavar = "filename", help = "Set the name of the LIGO light-weight XML file from which to load injections (optional).")
	parser.add_option("--instrument", metavar = "name", help = "Set the name of the instrument to analyze, e.g. \"H1\" (required).")
	parser.add_option("--channel-name", metavar = "name", help = "Set the name of the channel to process (required).")
	parser.add_option("--sample-rate", metavar = "Hz", type = "float", default = 8192.0, help = "Downsample the data to this sample rate.  Default = 8192 Hz.")
	parser.add_option("--psd-fft-length", metavar = "seconds", type = "float", default = 8.0, help = "Set the length of the FFT windows used to measure the PSD (optional).")
	parser.add_option("--psd-zero-pad-length", metavar = "seconds", type = "float", default = 0.0, help = "Set the length of zero-padding in the FFT windows used to measure the PSD (optional).")
	parser.add_option("--average-length", metavar = "seconds", type = "float", default = 64.0, help = "Set the time scale for the running mean (optional).  Default = 64.0.")
	parser.add_option("--median-samples", metavar = "samples", type = "int", default = 5, help = "Set the number of samples in the median history (optional).  Default = 5.")
	parser.add_option("--f-min", metavar = "Hz", type = "float", default = 10.0, help = "Set the lower bound of the spectrum plot's horizontal axis.  Default = 10.0.")
	parser.add_option("--f-max", metavar = "Hz", type = "float", default = 4000.0, help = "Set the upper bound of the spectrum plot's horizontal axis.  Default = 4000.0.")
	parser.add_option("--output", metavar = "filename", help = "Set the name of the movie file to write (optional).  The default is to display the video on screen.")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose (optional).")

	options, filenames = parser.parse_args()

	if sum(1 for option in ("frame_cache", "fake_data", "online_data") if getattr(options, option) is not None) != 1:
		raise ValueError, "must provide exactly one of --frame-cache, --fake-data, --online-data"

	required_options = ["instrument", "channel_name"]
	if not options.online_data:
		required_options += ["gps_start_time", "gps_end_time"]
	missing_options = [option for option in required_options if getattr(options, option) is None]
	if missing_options:
		raise ValueError, "missing required option(s) %s" % ", ".join("--%s" % option.replace("_", "-") for option in sorted(missing_options))

	if options.f_max <= options.f_min:
		raise ValueError, "--f-max must be >= --f-min"

	if not options.online_data:
		options.gps_start_time = LIGOTimeGPS(options.gps_start_time)
		options.gps_end_time = LIGOTimeGPS(options.gps_end_time)
		options.seg = segments.segment(options.gps_start_time, options.gps_end_time)
	else:
		options.seg = None

	return options, filenames


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# parse command line
#


options, filenames = parse_command_line()


#
# build pipeline
#


def build_pipeline(pipeline, head, sample_rate, psd_fft_length, psd_zero_pad_length, average_length, median_samples, (f_min, f_max), verbose = False):
	head = pipeparts.mkresample(pipeline, head, quality = 9)
	head = pipeparts.mkcapsfilter(pipeline, head, "audio/x-raw-float, rate=%d" % sample_rate)
	head = pipeparts.mkwhiten(pipeline, head, fft_length = psd_fft_length, zero_pad = psd_zero_pad_length, average_samples = int(round(average_length / (psd_fft_length / 2) - 1)), median_samples = median_samples)
	pipeparts.mkfakesink(pipeline, head)
	head = pipeparts.mkqueue(pipeline, head, pad_name = "mean-psd", max_size_buffers = 4)

	head = pipeparts.mkspectrumplot(pipeline, head, f_min = f_min, f_max = f_max)
	head = pipeparts.mkcapsfilter(pipeline, head, "video/x-raw-rgb, width=768, height=320")
	return head


#
# construct and run pipeline
#


mainloop = gobject.MainLoop()
pipeline = gst.Pipeline("spectrum-movie")
handler = lloidparts.LLOIDHandler(mainloop, pipeline)


if options.seg is not None:
	seek = gst.event_new_seek(
		1.0, gst.FORMAT_TIME, gst.SEEK_FLAG_KEY_UNIT,
		gst.SEEK_TYPE_SET, options.seg[0].ns(),
		gst.SEEK_TYPE_SET, options.seg[1].ns()
	)
else:
	seek = None
head = lloidparts.mkLLOIDbasicsrc(
	pipeline,
	seek,
	options.instrument,
	lloidparts.DetectorData(options.frame_cache, options.channel_name),
	fake_data = options.fake_data,
	online_data = options.online_data,
	injection_filename = options.injections,
	verbose = options.verbose
)
head = build_pipeline(
	pipeline,
	head,
	options.sample_rate,
	options.psd_fft_length,
	options.psd_zero_pad_length,
	options.average_length,
	options.median_samples,
	(options.f_min, options.f_max),
	verbose = options.verbose
)
if options.output is not None:
	pipeparts.mkogmvideosink(pipeline, head, options.output, verbose = options.verbose)
else:
	pipeparts.mkvideosink(pipeline, pipeparts.mkcolorspace(pipeline, head))


#
# process segment
#


pipeline.set_state(gst.STATE_PLAYING)
mainloop.run()


#
# done
#
