#!/usr/bin/python
from gstlal import pipeparts
from gstlal import lloidparts
from optparse import OptionParser, Option
from glue import segments
from pylal.datatypes import LIGOTimeGPS
import pygtk
pygtk.require("2.0")
import gobject
gobject.threads_init()
import pygst
pygst.require("0.10")
import gst
import sys
import os

parser = OptionParser(description = __doc__)
parser.add_option("--gps-start-time", metavar = "seconds", help = "Set the start time of the segment to analyze in GPS seconds (required).  Can be specified to nanosecond precision.")
parser.add_option("--gps-end-time", metavar = "seconds", help = "Set the end time of the segment to analyze in GPS seconds (required).  Can be specified to nanosecond precision.")
parser.add_option("--injections", metavar = "filename", help = "Set the name of the LIGO light-weight XML file from which to load injections (optional).")
parser.add_option("--instrument", metavar = "name", help = "Set the name of the instrument to analyze, e.g. \"H1\" (required).")
parser.add_option("--channel-name", metavar = "name", default = "FAKE-STRAIN", help = "Set the name of the channel to process (optional).  The default is \"FAKE-STRAIN\".")
parser.add_option("--fake-data", metavar = "(white|silence|LIGO|AdvLIGO)", default = 'AdvLIGO', help = "Set the type of noise (default AdvLIGO).")
parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose (optional).")

options, filenames = parser.parse_args()

seg = segments.segment(LIGOTimeGPS(options.gps_start_time), LIGOTimeGPS(options.gps_end_time))

pipeline = gst.Pipeline(sys.argv[0])
mainloop = gobject.MainLoop()
handler = lloidparts.LLOIDHandler(mainloop, pipeline)
seekevent = gst.event_new_seek(1.0, gst.Format(gst.FORMAT_TIME), gst.SEEK_FLAG_FLUSH | gst.SEEK_FLAG_KEY_UNIT, gst.SEEK_TYPE_SET, seg[0].ns(), gst.SEEK_TYPE_SET, seg[1].ns())

head = lloidparts.mkLLOIDbasicsrc(pipeline, seekevent, options.instrument, lloidparts.DetectorData(None, options.channel_name), fake_data = options.fake_data, online_data = False, injection_filename = options.injections, frame_segments = None, verbose = options.verbose)
head = pipeparts.mkprogressreport(pipeline, head, "frames")
try:
	outpath = options.instrument+"-"+options.channel_name
	os.mkdir(outpath)
except:
	pass
pipeparts.mkframesink(pipeline, head, path=outpath, sync=False, async=True, frame_type=options.instrument)

pipeline.set_state(gst.STATE_PAUSED)
pipeline.set_state(gst.STATE_PLAYING)

mainloop.run()

