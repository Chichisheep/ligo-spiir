#!/usr/bin/python

import sys
from pylal import rate
import matplotlib
matplotlib.use('Agg')
import pylab
import numpy
from glue.ligolw import utils
from scipy import interpolate

def get_smoothed_array(xmldoc, ifo, stride = 5):
	wn = rate.gaussian_window2d(3*stride,3*stride, sigma=2*stride)
	A = rate.binned_array_from_xml(xmldoc, ifo)
	return rate.filter_array(A.array.T,wn)

def decimate_array(arr, stride=5):
	return arr[::stride, ::stride]

def linearize_array(arr):
	return arr.reshape((1,arr.shape[0] * arr.shape[1]))

def get_nonzero(arr):
	return arr[arr != 0]

def possible_ranks_array(A, B, Alt, Blt, delta_t):
	out = numpy.outer(A, B) * 2 * delta_t / Alt / Blt
	out = out.reshape((out.shape[0] * out.shape[1],))
	out.sort()
	return out

def FAP_from_ranks(ranks):
	" ranks should be sorted "
	FAP = (numpy.arange(len(ranks))+1.) / len(ranks)
	return interpolate.interp1d(ranks, FAP)
	
def FAR_from_FAP(faps, t):
	return 0. - numpy.log(1.-faps) / t

xmldoc = utils.load_filename(sys.argv[1], gz=sys.argv[1].endswith('gz'), verbose=True).childNodes[0]

H1nonzero = get_nonzero(linearize_array(decimate_array(get_smoothed_array(xmldoc, "H1"))))
H2nonzero = get_nonzero(linearize_array(decimate_array(get_smoothed_array(xmldoc, "H2"))))
L1nonzero = get_nonzero(linearize_array(decimate_array(get_smoothed_array(xmldoc, "L1"))))

ranks = possible_ranks_array(H1nonzero, L1nonzero, 100000., 100000., 0.015)
faps = FAP_from_ranks(ranks)
testranks = numpy.logspace(numpy.log10(ranks[0]), numpy.log10(ranks[-1]), 10000)

pylab.figure(1)
pylab.loglog(ranks, FAR_from_FAP((numpy.arange(len(ranks))+1.) / len(ranks),100000) )
# test the interpolation
pylab.loglog(testranks, FAR_from_FAP(faps(testranks),100000))
pylab.xlabel('rank')
pylab.ylabel('FAR')
pylab.savefig('test.png',dpi=300)
