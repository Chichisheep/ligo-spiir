#!/usr/bin/python

import numpy
from scipy.interpolate import interp1d
import sys
from gstlal import reference_psd
from pylal.xlal import datatypes
from pylal.xlal.datatypes import lalunit
from optparse import OptionParser

parser = OptionParser(description = __doc__)
parser.add_option("--instrument", help="instrument, e.g. H1")
parser.add_option("--output", metavar = "filename", help = "Set the name of the LIGO light-weight XML file to output")
parser.add_option("--df", metavar = "float", type = "float", default = 0.25, help = "set the frequency resolution to interpolate to, default = 0.25")
parser.add_option("--invert", action = "store_true", help = "if set put 1/psd into the file")
options, filenames = parser.parse_args()

data = numpy.loadtxt(filenames[0])
f = data[:,0]
psd = data[:,1]**2

#FIXME hack to pad the series since it doesn't start at 0 :(
psd = numpy.concatenate((numpy.ones(int(f[0] / options.df) + 1) * psd[0],psd))
f = numpy.concatenate((numpy.arange(0, f[0], options.df), f))
uniformf = numpy.arange(0, f.max(), options.df)
psdinterp = interp1d(f, psd)
psd = psdinterp(uniformf)

if options.invert:
	psdseries = datatypes.real8frequencyseries.REAL8FrequencySeries(deltaF=options.df, data=1.0/psd, sampleUnits=lalunit.LALUnit("s strain^2"), f0=0) # note the inverse of the psd
else:
	psdseries = datatypes.real8frequencyseries.REAL8FrequencySeries(deltaF=options.df, data=psd, sampleUnits=lalunit.LALUnit("s strain^2"), f0=0)
reference_psd.write_psd(options.output, psdseries, instrument = options.instrument)

