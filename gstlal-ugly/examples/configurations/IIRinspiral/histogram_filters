#!/usr/bin/env python

from gstlal import cbc_template_iir
from glue.ligolw import utils, array, param, lsctables
import matplotlib
from matplotlib.ticker import NullFormatter, MultipleLocator, FormatStrFormatter, FixedLocator, NullLocator, LogFormatterMathtext
matplotlib.use('Agg')
import pylab
import sys
import numpy

file = open('snrlist.csv','wb')

m1 = []
m2 = []
snrs = []
N = []

print basename
for f in sys.argv[1:]:
	print f
	xmldoc = utils.load_filename(f)#, gz=f.endswith('gz'))

	Ndict = {}
	sample_rates = [int(r) for r in param.get_pyvalue(xmldoc, 'sample_rate').split(',')]
	n = 0
	for sr in sample_rates:
		n += array.get_array(xmldoc, 'd_%d' % (sr,)).get_shape()[1]
		#n = array.get_array(xmldoc, 'a_%d' % (sr,)).get_shape()[0] * array.get_array(xmldoc, 'a_%d' % (sr,)).get_shape()[1]/2 * sr
		#M.setdefault(sr, []).append(n)


	sngl_inspiral_table=lsctables.table.get_table(xmldoc, lsctables.SnglInspiralTable.tableName)
	for tmp, row in enumerate(sngl_inspiral_table):
		snrs.append(row.snr)
		m1.append(row.mass1)
		m2.append(row.mass2)
		N.append(n)

		#print >>sys.stderr, '%13.8f, %13.8f, %13.8f, %10d' % (m1[tmp], m2[tmp], snrs[tmp], N[tmp])
		#print >>file, '%13.8f, %13.8f, %13.8f' % (m1[tmp], m2[tmp], snrs[tmp])
file.close()

xlmax = -1
xlmin = 1e9
x = snrs
xmin = numpy.min(x)
xmax = numpy.max(x)
xlmin = numpy.min([xmin,xlmin])
xlmax = numpy.max([xmax,xlmax])
xbins = numpy.linspace(xmin, xmax, 1500)

if labeltag not None:
	labeltage = "unknown"

pylab.figure()
ax1 = pylab.axes()
ax1.hist( x, xbins, histtype = 'step', cumulative = True, normed=True, label = '%s, N=%d' % (labeltag, len(x)), align = 'mid')
#ax1.set_xlim( ((xmin), (xmax)) )
#ax1.set_ylim( (0.01, 1.0) )
ax1.set_yscale('log')
ax1.grid(which='both')
#ax1.set_yscale('log')
#ax1.set_xscale('log')
ax1.set_xlim( (xlmin, xlmax))
#ax1.set_xlim( ((0.9900), (0.9925)) )
ax1.set_ylim( (0.0001, 1.0) )
ax1.xaxis.set_major_formatter(FormatStrFormatter('%6.5f'))
for tl in ax1.xaxis.get_ticklabels():
    tl.set_rotation(15)
pylab.legend(loc=2)
pylab.ylabel('Percent of Templates')
pylab.xlabel('SNR Overlap')
pylab.savefig('SNROverlap.png', dpi=300)
pylab.close()
