#!/usr/bin/env python

import sys
import time
import matplotlib
matplotlib.use('Agg')
matplotlib.rcParams.update({
		"font.size": 16.0,
		"axes.titlesize": 14.0,
		"axes.labelsize": 14.0,
		"xtick.labelsize": 13.0,
		"ytick.labelsize": 13.0,
		"legend.fontsize": 13.0,
		"figure.dpi": 300,
		"savefig.dpi": 300,
		"text.usetex": True,
		"path.simplify": True
})
import pylab
import numpy
from gstlal import cbc_template_iir
from gstlal import lloidplots
from glue.ligolw import utils, array, param, lsctables
from glue.ligolw.utils import process as ligolw_process
from matplotlib.ticker import NullFormatter, MultipleLocator, FormatStrFormatter, FixedLocator, NullLocator, LogFormatterMathtext, LinearLocator, ScalarFormatter, MaxNLocator
from gstlal.pipeio import repack_complex_array_to_real, repack_real_array_to_complex

def plotSNROverlap(snrlist, out_filename="SNROverlap.png"):
	"""
	Function to plot a histogram of the IIR to template overlap. Very useful to see if bank is satisfactorily defined
	"""

	# Set up limits of histogram
	xlmax = -1
	xlmin = 1e9
	x = snrlist
	xmin = numpy.min(x)
	xmax = numpy.max(x)
	xlmin = numpy.min([xmin,xlmin])
	xlmax = numpy.max([xmax,xlmax])
	xbins = numpy.linspace(xmin, xmax, 1500)

	pylab.figure()
	ax1 = pylab.axes()
	ax1.hist( x, xbins, histtype = 'step', cumulative = True, normed=True, align = 'mid')
	#ax1.set_xlim( ((xmin), (xmax)) )
	#ax1.set_ylim( (0.01, 1.0) )
	ax1.set_yscale('log')
	ax1.grid(which='both')
	ax1.set_xlim( (xlmin, xlmax))
	#ax1.set_xlim( ((0.9900), (0.9925)) )
	ax1.set_ylim( (0.0001, 1.0) )
	ax1.xaxis.set_major_formatter(FormatStrFormatter('%6.5f'))
	for tl in ax1.xaxis.get_ticklabels():
		tl.set_rotation(15)
	pylab.grid()
	pylab.ylabel('Percent of Templates')
	pylab.xlabel('SNR Overlap')
	pylab.savefig(out_filename)
	pylab.close()

def plotNumFiltersHistogram(ratedict, out_filename="numfilters.png"):
	"""
	Plot a histogram of filters per rate bin
	"""

	Nsr = len(ratedict)
	ind = numpy.arange(Nsr)
	width = 0.85

	ratelist = []
	numlist = []
	ccostlist = []
	for rate in sorted(ratedict.keys()):
		ratelist.append(str(rate))
		numlist.append(ratedict[rate])
		ccostlist.append(rate * ratedict[rate] * 8.0)

	w1 = 0.7
	h1 = 0.3
	wm = 0.2
	ho = 0.1
	hm2 = 0.1
	hm = 1 - 2*h1 -ho -hm2

	rect_hist1 = [wm, hm+1*h1+1*ho, w1, h1]
	rect_hist2 = [wm, hm+0*h1+0*ho, w1, h1]

	fig = pylab.figure(1, figsize=(8,8))

	axhist1 = pylab.axes(rect_hist1)
	axhist1.bar(ind, numlist, width)
	axhist1.set_ylabel('Number of IIR filters')
	axhist1.xaxis.set_ticks(ind+0.5*width)
	axhist1.xaxis.set_ticklabels(ratelist)

	axhist2 = pylab.axes(rect_hist2)
	axhist2.bar(ind, ccostlist, width)
	axhist2.set_ylabel('Computational Cost (FLOPS)')
	axhist2.xaxis.set_ticks(ind+0.5*width)
	axhist2.xaxis.set_ticklabels(ratelist)

        pylab.savefig(out_filename)
	pylab.close()

def plotSNRhistograms(snrlist, mchirplist, niirlist, out_filename="allvsall.png", textstring = None, scl = 1136.1):
	"""
	Plot three histograms to show the distribution of the SNR overlap as a function of chirp mass and size of IIR bank
	"""

	def plotScatter(rec, x, y, xlabel = None, ylabel = None, ylabelposition = "left"):
		axes = pylab.axes(rec)
		axes.xaxis.set_major_formatter( NullFormatter())
		axes.yaxis.set_major_formatter( NullFormatter())
		#axes.xaxis.set_major_locator( MultipleLocator(5) )
		axes.xaxis.set_major_locator( MaxNLocator(6) )
		axes.yaxis.set_major_locator( MaxNLocator(6) )
		#axes.yaxis.set_major_locator( LinearLocator(7) )
		#axes.xaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		#axes.yaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		if xlabel is not None:
			axes.set_xlabel(xlabel)
			axes.xaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		if ylabel is not None:
			axes.set_ylabel(ylabel)
			axes.yaxis.set_label_position(ylabelposition)
			axes.yaxis.set_ticks_position(ylabelposition)
			axes.yaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		pylab.grid()
		axes.scatter(x, y, s=1, edgecolor='none')
		return axes

	def plotHistogram(rec, x, Xa, xlabel = None, ylabel = None, orientation = "vertical"):
		axes = pylab.axes(rec)
		axes.hist(x, 50, histtype='step', orientation=orientation)
		axes.xaxis.set_major_formatter( NullFormatter())
		axes.yaxis.set_major_formatter( NullFormatter())
		if orientation == "vertical":
			axes.xaxis.set_ticks(Xa.get_xticks())
			axes.set_xlim(Xa.get_xlim())
		else:
			axes.yaxis.set_ticks(Xa.get_yticks())
			axes.set_ylim(Xa.get_ylim())
                if xlabel is not None:
                        axes.set_xlabel(xlabel)
                if ylabel is not None:
                        axes.set_ylabel(ylabel)
                pylab.grid()


		return axes

	# definitions for the axes
	#scatterboxwidth = scatterboxheight = 0.35
	#histogramwidth = histogramheight = 0.17
	#separationwidth = separatioinheight = 0.01
	#marginwidth = marginheight = 0.03
	w1 = h1 = 0.34
	w2 = h2 = 0.15
	wo = ho = 0.01
	wm2 = hm2 = 0.03
	wm = 1 - 2*w1 -w2 - wo - wm2
	hm = 1 - 2*h1 -h2 - ho - hm2

	rect_scatter1 = [wm, hm+ho+h1, w1, h1]
	rect_scatter2 = [wm+w1+wo, hm+ho+h1, w1, h1]
	rect_scatter3 = [wm+w1+wo, hm, w1, h1]
	rect_histx1 = [wm, hm+2*h1+2*ho, w1, h2]
	rect_histx2 = [wm+w1+wo, hm+2*h1+2*ho, w1, h2]
	rect_histy1 = [wm+2*w1+2*wo, hm+h1+ho, w2, h1]

	fig = pylab.figure(1, figsize=(8,8))

	if textstring is not None:
		pylab.figtext(0.25,0.25,(s for s in textstring),fontsize=18)

	axScatter1 = plotScatter(rect_scatter1, niirlist, snrlist, "Number of IIR filters", "SNR Overlap")
	axScatter2 = plotScatter(rect_scatter2, mchirplist, snrlist)
	axScatter3 = plotScatter(rect_scatter3, mchirplist, niirlist, "Chirp Mass", "Number of IIR filters", "right")
	mchirps = numpy.linspace(min(mchirplist),max(mchirplist),50)
	axplot = axScatter3.plot(mchirps, scl*mchirps**(-5./6.), color='red')
	pylab.legend([axplot],[r'$N \propto \mathcal{M}_c^{-5/6}$'])
	#print axScatter2.get_xticks(), axScatter2.get_xlim()
	axHistogramx1 = plotHistogram(rect_histx1, niirlist, Xa = axScatter1)
	axHistogramx2 = plotHistogram(rect_histx2, mchirplist, Xa = axScatter2)
	axHistogramy1 = plotHistogram(rect_histy1, snrlist, Xa = axScatter1, orientation="horizontal")

	return fig


#file = open('snrlist.csv','wb')

m1 = []
m2 = []
mchirp = []
snrs = []
Niir = []
M = {}
Mr = {}
ntemplates = 0
verbose = False

for f in sys.argv[1:]:
	print f
	if verbose:
		start = time.time()
	xmldoc = utils.load_filename(f)#, gz=f.endswith('gz'))
	if verbose:
		print >> sys.stderr, "load doc %f" % ((time.time() - start))
		start = time.time()
	sample_rates = [int(r) for r in param.get_pyvalue(xmldoc, 'sample_rate').split(',')]
	n = 0
	N = None
	for sr in sample_rates:
		if sr not in M: M[sr] = 0
		if sr not in Mr: Mr[sr] = 0
		#n = array.get_array(xmldoc, 'a_%d' % (sr,)).get_shape()[0] * array.get_array(xmldoc, 'a_%d' % (sr,)).get_shape()[1]/2 * sr
		aarray = repack_real_array_to_complex(array.get_array(xmldoc, 'a_%d' % (sr,)).array)
		Mr[sr] += aarray.shape[0]*aarray.shape[1]
		if N is None:
			N = numpy.zeros(len(aarray))
		#print len(aarray)
		for tmp, arow in enumerate(aarray):
			nonzero = 0
			for aseries in arow:
				if numpy.abs(aseries) !=0:
					nonzero += 1
			N[tmp] += nonzero
			M[sr] += nonzero
	if verbose:
		print >> sys.stderr, "sr arrays %f" % ((time.time() - start))
		start = time.time()

	sngl_inspiral_table=lsctables.table.get_table(xmldoc, lsctables.SnglInspiralTable.tableName)
	for tmp, row in enumerate(sngl_inspiral_table):
		snrs.append(row.snr)
		m1.append(row.mass1)
		m2.append(row.mass2)
		mchirp.append(row.mchirp)
		Niir.append(N[tmp])
		#print >>sys.stderr, '%13.8f, %13.8f, %13.8f, %10d' % (m1[tmp], m2[tmp], snrs[tmp], Niir[tmp])
		#print >>file, '%13.8f, %13.8f, %13.8f' % (m1[tmp], m2[tmp], snrs[tmp]

	ntemplates += tmp + 1
	if verbose:
		print >> sys.stderr, "sngl_inspral table %f" % ((time.time() - start))
		start = time.time()

#file.close()

sumtotal = 0
intcost = 0
Nsum = 0
print >> sys.stderr, 'Sample rate, N templates, Number of IIR filters, Actual number of IIR filters, IIR FLOPS, Upsampler FLOPS'
for sr in sorted(M.keys()):
	sumtotal += sr * Mr[sr]
	intcost += sr * 16.0 * 2.0 * ntemplates
	Nsum += Mr[sr]
	print >>sys.stderr, '%5d, %3d, %10d, %10d, %11.0f, %11.0f' % (sr, ntemplates, M[sr], Mr[sr], sr * Mr[sr], sr * 16.0 * 2.0 * ntemplates)

print >>sys.stderr, 'Total cost of filtering  (FLOPS) %e' % sumtotal
print >>sys.stderr, 'Total cost of upsampling (FLOPS) %e' % intcost
print >>sys.stderr, 'Total Number of IIR filters %d' % Nsum

MM = ligolw_process.get_process_params(xmldoc, "tmpltbank", "--minimal-match")
spectype = ligolw_process.get_process_params(xmldoc, "tmpltbank", "--spectrum-type")
flow = ligolw_process.get_process_params(xmldoc, "tmpltbank", "--low-frequency-cutoff")
fhigh = ligolw_process.get_process_params(xmldoc, "tmpltbank", "--sample-rate")
epsilon = param.get_pyvalue(xmldoc, 'epsilon')
scl = 3.0*(flow[0]**(-5.0/6.0)-(1.0*fhigh[0])**(-5.0/6.0))/(4*numpy.pi**(4.0/3.0)*numpy.sqrt(15.0*epsilon)*(4.925491e-6)**(5.0/6.0))


fig = plotSNRhistograms(snrs, mchirp, Niir, scl = scl)
mmin = min(min(m1),min(m2))
mmax = max(max(m1),max(m2))
Cmin = min(mchirp)
Cmax = max(mchirp)

s = "N = %d\nComponent mass = (%3.2f, %3.2f)\nTotal mass = (%3.2f, %3.2f)\nChirp mass = (%3.2f, %3.2f)\n$\epsilon$ = %5.4f\nMinimal match = %3.2f\nMin Freq = %2.0f" % (ntemplates, mmin, mmax, 2.0*mmin, 2.0*mmax, Cmin, Cmax, epsilon, MM[0], 1.0*flow[0])
pylab.figtext(0.13, 0.18, s, fontsize=14)

pylab.savefig("allvsall.png")
pylab.close()

plotNumFiltersHistogram(Mr)
plotSNROverlap(snrs)

