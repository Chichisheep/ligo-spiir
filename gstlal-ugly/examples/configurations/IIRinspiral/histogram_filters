#!/usr/bin/env python

from gstlal import cbc_template_iir
from glue.ligolw import utils, array, param, lsctables
import matplotlib
from matplotlib.ticker import NullFormatter, MultipleLocator, FormatStrFormatter, FixedLocator, NullLocator, LogFormatterMathtext, LinearLocator, ScalarFormatter
matplotlib.use('Agg')
import pylab
import sys
import numpy
from gstlal.pipeio import repack_complex_array_to_real, repack_real_array_to_complex

def plotSNROverlap(snrlist, out_filename="SNROverlap.png", labeltag="unknown"):
	"""
	Function to plot a histogram of the IIR to template overlap. Very useful to see if bank is satisfactorily defined
	"""

	# Set up limits of histogram
	xlmax = -1
	xlmin = 1e9
	x = snrlist
	xmin = numpy.min(x)
	xmax = numpy.max(x)
	xlmin = numpy.min([xmin,xlmin])
	xlmax = numpy.max([xmax,xlmax])
	xbins = numpy.linspace(xmin, xmax, 1500)

	pylab.figure()
	ax1 = pylab.axes()
	ax1.hist( x, xbins, histtype = 'step', cumulative = True, normed=True, label = '%s, N=%d' % (labeltag, len(x)), align = 'mid')
	#ax1.set_xlim( ((xmin), (xmax)) )
	#ax1.set_ylim( (0.01, 1.0) )
	ax1.set_yscale('log')
	ax1.grid(which='both')
	ax1.set_xlim( (xlmin, xlmax))
	#ax1.set_xlim( ((0.9900), (0.9925)) )
	ax1.set_ylim( (0.0001, 1.0) )
	ax1.xaxis.set_major_formatter(FormatStrFormatter('%6.5f'))
	for tl in ax1.xaxis.get_ticklabels():
		tl.set_rotation(15)
	pylab.legend(loc=2)
	pylab.ylabel('Percent of Templates')
	pylab.xlabel('SNR Overlap')
	pylab.savefig('SNROverlap.png', dpi=300)
	pylab.close()

def plotSNRhistograms(snrlist, mchirplist, niirlist, out_filename="SNRhistograms.png"):
	"""
	Plot three histograms to show the distribution of the SNR overlap as a function of chirp mass and size of IIR bank
	"""

	def plotScatter(rec, x, y, xlabel = None, ylabel = None):
		axes = pylab.axes(rec)
		axes.xaxis.set_major_formatter( NullFormatter())
		axes.yaxis.set_major_formatter( NullFormatter())
		if xlabel is not None:
			axes.set_xlabel(xlabel)
			axes.xaxis.set_label_position('top')
			axes.xaxis.set_ticks_position('top')
			axes.xaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		if ylabel is not None:
			axes.set_ylabel(ylabel)
			axes.yaxis.set_label_position('right')
			axes.yaxis.set_ticks_position('right')
			axes.yaxis.set_major_formatter(ScalarFormatter(useOffset=False))
		pylab.grid()
		axes.scatter(x, y, s=1, edgecolor='none')
		return axes

	def plotHistogram(rec, x, xlabel = None, ylabel = None, orientation = "vertical"):
		axes = pylab.axes(rec)
		axes.xaxis.set_major_formatter( NullFormatter())
		axes.yaxis.set_major_formatter( ScalarFormatter(useOffset=False) )
		#axes.yaxis.set_major_locator( LinearLocator(4) )
                if xlabel is not None:
                        axes.set_xlabel(xlabel)
                if ylabel is not None:
                        axes.set_ylabel(ylabel)
                pylab.grid()

		axes.hist(x, 50, histtype='step', orientation=orientation)
		return axes

	# definitions for the axes
	#scatterboxwidth = scatterboxheight = 0.35
	#histogramwidth = histogramheight = 0.17
	#separationwidth = separatioinheight = 0.01
	#marginwidth = marginheight = 0.03
	w1 = h1 = 0.3
	w2 = h2 = 0.12
	wo = ho = 0.01
	wm2 = hm2 = 0.06
	wm2 = 0.12
	wm = 1 - 2*w1 -w2 - wo - wm2
	hm = 1 - 2*h1 -h2 - ho - hm2

	rect_scatter1 = [wm+w2+wo, hm+h2+ho+h1+ho, w1, h1]
	rect_scatter2 = [wm+w2+wo+w1+wo, hm+h2+ho+h1+ho, w1, h1]
	rect_scatter3 = [wm+w2+wo+w1+wo, hm+h2+ho, w1, h1]
	rect_histx1 = [wm+w2+wo, hm+ho+h1, w1, h2]
	rect_histx2 = [wm+w2+wo+w1+wo, hm, w1, h2]
	rect_histy1 = [wm, hm+h2+ho+h1+ho, w2, h1]

	fig = pylab.figure(1, figsize=(8,8))
	axScatter1 = plotScatter(rect_scatter1, niirlist, snrlist, "Number of IIR filters")
	axScatter2 = plotScatter(rect_scatter2, mchirplist, snrlist, "Chirp Mass", "SNR OVerlap")
	axScatter3 = plotScatter(rect_scatter3, mchirplist, niirlist, ylabel="Number of IIR filters")
	axHistogramx1 = plotHistogram(rect_histx1, niirlist, "Number of IIR filters")
	axHistogramx2 = plotHistogram(rect_histx2, mchirplist, "Chirp Mass")
	axHistogramy1 = plotHistogram(rect_histy1, snrlist, ylabel="SNR Overlap", orientation="horizontal")
	pylab.savefig(out_filename, dpi = 300)
	pylab.close()



file = open('snrlist.csv','wb')

m1 = []
m2 = []
mchirp = []
snrs = []
Niir = []


for f in sys.argv[1:]:
	print f
	xmldoc = utils.load_filename(f)#, gz=f.endswith('gz'))

	sample_rates = [int(r) for r in param.get_pyvalue(xmldoc, 'sample_rate').split(',')]
	n = 0
	N = None
	for sr in sample_rates:
		n += array.get_array(xmldoc, 'd_%d' % (sr,)).get_shape()[1]
		#n = array.get_array(xmldoc, 'a_%d' % (sr,)).get_shape()[0] * array.get_array(xmldoc, 'a_%d' % (sr,)).get_shape()[1]/2 * sr
		#M.setdefault(sr, []).append(n)
		aarray = repack_real_array_to_complex(array.get_array(xmldoc, 'a_%d' % (sr,)).array)
		if N is None:
			N = numpy.zeros(len(aarray))

		for tmp, arow in enumerate(aarray):
			nonzero = 0
			for aseries in arow:
				if numpy.abs(aseries) !=0:
					nonzero += 1
			N[tmp] += nonzero

	sngl_inspiral_table=lsctables.table.get_table(xmldoc, lsctables.SnglInspiralTable.tableName)
	for tmp, row in enumerate(sngl_inspiral_table):
		snrs.append(row.snr)
		m1.append(row.mass1)
		m2.append(row.mass2)
		mchirp.append(row.mchirp)
		Niir.append(N[tmp])
		print >>sys.stderr, '%13.8f, %13.8f, %13.8f, %10d' % (m1[tmp], m2[tmp], snrs[tmp], Niir[tmp])
		#print >>file, '%13.8f, %13.8f, %13.8f' % (m1[tmp], m2[tmp], snrs[tmp])

file.close()

plotSNRhistograms(snrs, mchirp, Niir)

