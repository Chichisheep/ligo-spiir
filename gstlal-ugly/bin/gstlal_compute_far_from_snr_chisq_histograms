#!/usr/bin/python

# FIXME proper copyright and GPL notice
# Copyright 2011 Kipp Cannon, Chad Hanna
#import matplotlib
#matplotlib.use('Agg')
#import pylab

import sys
import numpy
from scipy import interpolate, random
from scipy.stats import poisson
from glue.ligolw import lsctables
from glue.ligolw import utils
from glue.ligolw.utils import process as ligolw_process
from glue.ligolw.utils import segments as ligolw_segments
from glue.segmentsUtils import vote
from pylal import inject
from pylal import rate
from optparse import OptionParser
from gstlal import inspiral
from gstlal.svd_bank import read_bank
from gstlal import far

try:
	import sqlite3
except ImportError:
	# pre 2.5.x
	from pysqlite2 import dbapi2 as sqlite3

sqlite3.enable_callback_tracebacks(True)


def parse_command_line():
	parser = OptionParser()
	parser.add_option("--background-bins-file", metavar = "filename", action = "append", help = "Set the name of the xml file containing the snr / chisq background distributions")
	parser.add_option("--segments-file", metavar = "filename", help = "Set the name of the xml file containing analysis segments.")
	parser.add_option("--segments-name", metavar = "name", default = "datasegments", help = "Set the name of the analysis segments (default = 'datasegments').")
	parser.add_option("--vetoes-file", metavar = "filename", help = "Set the name of the xml file containing the veto segments.")
	parser.add_option("--vetoes-name", metavar = "name", default = "vetoes", help = "Set the name of the vetoes segments (default = 'vetoes').")
	parser.add_option("--additional-trials-factor", metavar = "int", type="int", default=1, help = "set an additional trials factor to apply to the FAP.  Default = 1 (no trials factor)")
	parser.add_option("--tmp-space", metavar = "dir", help = "Set the name of the tmp space if working with sqlite")
	parser.add_option("--compute-fap", action = "store_true", help = "compute fap, otherwise compute far assuming fap has been calculated")
	parser.add_option("--compute-far", action = "store_true", help = "compute far, only works if fap is being computed or has been computed.")
	parser.add_option("--verbose", "-v", action = "store_true", help = "Be verbose.")
	parser.add_option("--non-injection-db", help = "single file for non injections run")
	parser.add_option("--injection-dbs", action = "append", default=[], help = "append to the list of possible injection files, may be empty if no injections were done. Databases are assumed to be over the same time period as the non injection databases using the same templates.  If not the results will be nonsense.")

	options, filenames = parser.parse_args()
	return options, filenames

#
# Parse command line
#

options, filenames = parse_command_line()

#
# load segment data
#

segments = ligolw_segments.segmenttable_get_by_name(utils.load_filename(options.segments_file, verbose = options.verbose), options.segments_name).coalesce()
vetoes = ligolw_segments.segmenttable_get_by_name(utils.load_filename(options.vetoes_file, verbose = options.verbose), options.vetoes_name).coalesce()

#
# Here we get the union of all of the possible live time segments and subtract
# the vetoes.
#

segments -= vetoes
livetime = far.get_live_time(segments)

#
# Pull out background and injections distribution
#

if options.compute_fap:
	# retrieve rank data
	distribution_stats, distribution_seglists = inspiral.DistributionsStats.from_filenames(options.background_bins_file, verbose = options.verbose)
	Far = far.FAR(livetime, options.additional_trials_factor, distribution_stats)
else:
	Far = far.FAR(livetime, options.additional_trials_factor)

# late import for DB manipulations
from glue.ligolw import dbtables

#
# generate trials table
#

if options.compute_fap is not None:
	working_filename = dbtables.get_connection_filename(options.non_injection_db, tmp_path = options.tmp_space, verbose = options.verbose)
	connection = sqlite3.connect(working_filename)

	Far.trials_table = far.TrialsTable.from_db(connection)

	connection.close()
	dbtables.discard_connection_filename(options.non_injection_db, working_filename, verbose = options.verbose)


#
# iterate over files to rank
#

if options.compute_fap is not None:
	far.set_fap(options, Far, options.non_injection_db)
	# increment the trials factor by 1 before assigning faps for
	# injections.  Injections imply that there is always one more event
	Far.trials_table.increment(1)
	for f in options.injection_dbs:
		far.set_fap(options, Far, f)

if options.compute_far is not None:
	far.set_far(options, Far, options.non_injection_db)
	for f in options.injection_dbs:
		far.set_far(options, Far, f)
