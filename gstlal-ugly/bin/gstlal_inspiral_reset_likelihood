#!/usr/bin/env python
#
# Copyright (C) 2009-2011  Kipp Cannon, Chad Hanna, Drew Keppel
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


import sys
from optparse import OptionParser


from glue import segments
from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import utils
from glue.ligolw.utils import process as ligolw_process
from glue.ligolw.utils import search_summary as ligolw_search_summary


from gstlal import far


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser()
	parser.add_option("--verbose", action = "store_true", help = "Be verbose.")
	options, urls = parser.parse_args()
	return options, urls


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# parse command line
#


options, urls = parse_command_line()


#
# loop over input documents
#


for url in urls:
	#
	# load input document
	#

	in_xmldoc = utils.load_url(url, verbose = options.verbose)
	likelihood_data, process_id = far.LocalRankingData.from_xml(in_xmldoc)
	search_summary_row, = (row for row in lsctables.table.get_table(in_xmldoc, lsctables.SearchSummaryTable.tableName) if row.process_id == process_id)
	in_xmldoc.unlink()

	xmldoc = ligolw.Document()
	node = xmldoc.appendChild(ligolw.LIGO_LW())
	node.appendChild(lsctables.New(lsctables.ProcessTable))
	node.appendChild(lsctables.New(lsctables.ProcessParamsTable))
	node.appendChild(lsctables.New(lsctables.SearchSummaryTable))
	process = ligolw_process.register_to_xmldoc(xmldoc, u"gstlal_inspiral_reset_likelihood", options.__dict__)
	search_summary = ligolw_search_summary.append_search_summary(xmldoc, process)
	# reset the clock to None
	search_summary.set_out(segments.segment(None, None))
	ligolw_process.set_process_end_time(process)

	# reset the trials table to unity
	for k in likelihood_data.trials_table:
		likelihood_data.trials_table[k] = 1

	# Write out the result
	node.appendChild(likelihood_data.to_xml(process, search_summary))
	utils.write_filename(xmldoc, url, gz = url.endswith(".gz"), verbose = options.verbose)
