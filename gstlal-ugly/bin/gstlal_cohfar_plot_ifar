#! /usr/bin/env python
import os
import numpy as np
import scipy
import math
import csv
import logging
from optparse import OptionParser
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot

from glue import iterutils
from gstlal.postcoh_table_def import PostcohInspiralTable
from glue.ligolw import ligolw, lsctables, array, param, utils, types
from pylal import datatypes as laltypes
from pylal import git_version
import subprocess
import pdb

Attributes = ligolw.sax.xmlreader.AttributesImpl

# FIXME:  require calling code to provide the content handler
class DefaultContentHandler(ligolw.LIGOLWContentHandler):
	pass
array.use_in(DefaultContentHandler)
param.use_in(DefaultContentHandler)
lsctables.use_in(DefaultContentHandler)


def array_from_xml(filename, array_name, contenthandler = DefaultContentHandler, verbose = False):

	# Load document
	xmldoc = utils.load_filename(filename, contenthandler = contenthandler, verbose = verbose)

	for root in (elem for elem in xmldoc.getElementsByTagName(ligolw.LIGO_LW.tagName) if elem.hasAttribute(u"Name") and elem.Name == "gstlal_spiir_cohfar"):
		result = array.get_array(root, array_name).array 
	return result

def postcoh_table_from_xml(filename, contenthandler = DefaultContentHandler, verbose = False):

	# Load document
	xmldoc = utils.load_filename(filename, contenthandler = contenthandler, verbose = verbose)

	postcoh = PostcohInspiralTable.get_table(xmldoc)
	return postcoh

def append_missing_options(missing_options, options, option):
	if getattr(options, option) is None:
		missing_options.append("--%s" % option.replace("_", "-"))


def parse_command_line():
	parser = OptionParser(version = git_version.verbose_msg, usage = "%prog [options] [file ...]", description = "%prog to plot pdf and cdf")
	parser.add_option("--output-filename", default = "", metavar = "name", help = "Set the output file name")
	parser.add_option("--input-stats-filename", default = "", metavar = "name", help = "Set the input stats file name")
	parser.add_option("--zerolag-format", default = "", metavar = "name", help = "format support, single | multi")
	parser.add_option("--cohsnr", type = "float", help = "if format is single, read the cohsnr")
	parser.add_option("--combchisq", type = "float", help = "if format is single, read the combined chisq")
	parser.add_option("--input-zerolag-filename", default = "", metavar = "name", help = "Set the input stats file name")
	parser.add_option("--ifos", metavar = "name", help = "set the ifos to plot pdf and cdf")
	options, tmp = parser.parse_args()

	missing_options = []
	append_missing_options(missing_options, options, "output_filename")
	append_missing_options(missing_options, options, "input_stats_filename")
	if options.zerolag_format == "single":
		append_missing_options(missing_options, options, "cohsnr")
		append_missing_options(missing_options, options, "combchisq")

	if missing_options:
		raise ValueError, "missing required option(s) %s" % ", ".join(sorted(missing_options))

	return options

options = parse_command_line()

if options.ifos == "L1H1":
	ifos = "H1L1"
else:
	ifos = options.ifos
	
# pdf not needed now
#pdf = array_from_xml(options.input_stats_filename, pdf_name)
#figpdf = pyplot.figure()
#ax = fig.add_axes((.6,2.5,-0.5,2.5))
#pyplot.imshow(pdf, extent = [0.6, 2.5, -0.5, 2.5], origin = 'lower')
#pyplot.xlabel('log10(CohSNR)')	
#pyplot.ylabel('log10(CombinedChisq)')	
#pyplot.title('PDF')
#pyplot.savefig("pdf_%s" % options.output_filename_suffix)
pdf_name = "background_pdf:%s_lgsnr_lgchisq:array" % ifos
cdf_name = "background_cdf:%s_lgsnr_lgchisq:array" % ifos
rates_name = "background_rates:%s_histogram:array" % ifos


cdf = array_from_xml(options.input_stats_filename, cdf_name)
pdf = array_from_xml(options.input_stats_filename, pdf_name)
rates = array_from_xml(options.input_stats_filename, rates_name)

lgcdf = np.log10(cdf)
min_lgcdf = max(-7, lgcdf.min())
print min_lgcdf
max_lgcdf = lgcdf.max()
print max_lgcdf

#min_cdf = max(1e-10, cdf.min())
#max_cdf = cdf.max()
back_nevent = rates.sum()

print back_nevent

nstep = 30
coinc_time = 590148
nslide = 200
tick_lgcdf = np.linspace(min_lgcdf, max_lgcdf, num=nstep)
#tick_cdf = np.linspace(min_cdf, max_cdf, num=nstep)
back_lgfap = np.zeros(len(tick_lgcdf))
back_lgfap2 = np.zeros(len(tick_lgcdf))
back_lgfar = np.zeros(len(tick_lgcdf))
back_lgcevent = np.zeros(len(tick_lgcdf))
back_lgceventby8 = np.zeros(len(tick_lgcdf))
ntrial = 8
nifo = 2
#tick_prob = np.zeros(len(tick_cdf))
sum_cdf = lgcdf.sum()
sum_pdf = pdf.sum()
for itick in range(0, len(tick_lgcdf)):
	fap = float((1 + sum(rates[np.where(lgcdf < tick_lgcdf[itick])]) )) / back_nevent
	fap2 = sum(pdf[np.where(lgcdf < tick_lgcdf[itick])]) / sum_pdf
	back_lgfap[itick] = np.log10( fap )
	back_lgfap2[itick] = np.log10( fap2 )
	back_lgfar[itick] = np.log10(fap * back_nevent / (coinc_time * nslide * ntrial))
	back_lgcevent[itick] = np.log10( fap * back_nevent / nslide)
	back_lgceventby8[itick] = np.log10( fap * back_nevent / nslide / ntrial)


zerolags_filename = options.input_zerolag_filename.split(",")

all_table = lsctables.New(PostcohInspiralTable)
for zf in zerolags_filename:
	table = postcoh_table_from_xml(zf)
	print len(table)
	all_table.extend(table)
	iterutils.inplace_filter(lambda row:row.is_background == 0, all_table)
	print len(all_table)

pdb.set_trace()
sorted_table = sorted(all_table, key=lambda x: (x.end_time_H, x.end_time_ns_H))

# cluster the zerolags
pruned_table = lsctables.New(PostcohInspiralTable)
for i in range(0, len(sorted_table) - 1):
	next_entry = sorted_table[i+1]
	if i == 0:
		pruned_table.append(sorted_table[i])
		cur_entry = sorted_table[i+1]
		continue
	
	if (next_entry.end_time_H - cur_entry.end_time_H)*1e9 + next_entry.end_time_ns_H - cur_entry.end_time_ns_H > 5*1e8:
		pruned_table.append(cur_entry)
		cur_entry = sorted_table[i+1]
		continue

	if next_entry.cohsnr > cur_entry.cohsnr and (next_entry.end_time_H - cur_entry.end_time_H)*1e9 + next_entry.end_time_ns_H - cur_entry.end_time_ns_H < 5*1e8:
		cur_entry = sorted_table[i+1]
		continue

lgcohsnr = np.log10(sorted_table.getColumnByName("cohsnr"))
lgchisq = np.log10(sorted_table.getColumnByName("chisq"))

zerolag_nevent = len(lgcohsnr)
zerolag_lgcdf = np.zeros(zerolag_nevent)
zerolag_lgfap = np.zeros(len(lgcohsnr))
zerolag_lgifar = np.zeros(len(lgcohsnr))
zerolag_lnifar = np.zeros(len(lgcohsnr))
zerolag_lgcevent = np.zeros(len(tick_lgcdf))
for i in range(0, len(lgcohsnr)):
	snr_idx = max(min((lgcohsnr[i] - 0.605 )/ 0.01, 189), 0)
	chisq_idx = max(min((lgchisq[i] + 0.495 )/ 0.01, 299), 0)
	zerolag_lgcdf[i] = lgcdf[chisq_idx, snr_idx]

zerolag_lgfar = np.interp(zerolag_lgcdf, tick_lgcdf, back_lgfar) * ntrial * nifo
#zerolag_lgifar = - zerolag_lgfap - np.log10(float(zerolag_nevent*8)/coinc_time)
zerolag_lgifar = - zerolag_lgfar
first_time = True
for itick in range(0, len(tick_lgcdf)):
	tmp_cevent = len(zerolag_lgcdf[np.where(zerolag_lgcdf < tick_lgcdf[itick])])
	if tmp_cevent > 0:
		zerolag_lgcevent[itick] = np.log10(tmp_cevent)
		if first_time:
			nonzero_tick = itick
			first_time = False


step=50
tick_lgifar = np.linspace(2, 7, step)
theory_lgcevent = np.zeros(len(tick_lgifar))
zerolag_norm_lgcevent = np.zeros(len(tick_lgifar))
theory_lgcevent = - tick_lgifar + np.log10( coinc_time )

first_time = True
for itick in range(0, len(tick_lgifar)):
	tmp_cevent = len(zerolag_lgifar[np.where(zerolag_lgifar > tick_lgifar[itick])])
	if tmp_cevent > 0:
		zerolag_norm_lgcevent[itick] = np.log10(tmp_cevent)
	else:
		if first_time:
			zero_tick2 = itick
			first_time = False


if 1:
	pyplot.figure()
	#p1 = pyplot.plot(tick_lgcdf, back_lgcevent)
	p2, = pyplot.plot(tick_lgcdf, back_lgfar, label = 'background')
#	p3, = pyplot.plot(tick_lgcdf[nonzero_tick:], zerolag_lgcevent[nonzero_tick:], label = '8' r'$\pi$' 'shifted')
	pyplot.gca().invert_xaxis()
	pyplot.xlabel('lg' r'$d_0$')	
	pyplot.ylabel('lg FAR' r'($s^{-1}$)')	
	pyplot.legend()
	pyplot.savefig("P0_vs_far.png")



pyplot.figure()
#ax = fig.add_axes((.6,2.5,-0.5,2.5))
#p1 = pyplot.plot(tick_lgcdf, back_lgcevent)
p2, = pyplot.plot(tick_lgifar, theory_lgcevent, label = 'theory')
p3, = pyplot.plot(tick_lgifar[:zero_tick2-1], zerolag_norm_lgcevent[:zero_tick2-1], label = '8' r'$\pi$' 'shifted after clustering')
#pyplot.xlabel('log10(P0)')	
pyplot.xlabel('IFAR(s)')	
pyplot.ylabel('lg number of events')	
pyplot.legend()
pyplot.savefig(options.output_filename)


