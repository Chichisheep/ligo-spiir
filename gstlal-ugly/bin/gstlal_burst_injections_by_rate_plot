#!/usr/bin/env python
#
# Copyright (C) 2012 Chris Pankow
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import sys

import matplotlib
matplotlib.use( 'Agg' )
import pylab

import numpy
import math

from glue.ligolw import utils
from glue.ligolw import lsctables

xmldoc = utils.load_filename( sys.argv[1] )
tables = lsctables.getTablesByType( xmldoc, lsctables.SimBurstTable )[0]
time = [ simburst.time_geocent_gps for simburst in tables ]
hrss = [ simburst.hrss for simburst in tables ]
ra = [ simburst.ra for simburst in tables ]
dec = [ simburst.dec for simburst in tables ]
psi = [ simburst.psi for simburst in tables ]

p_t = []
r_t  = []
ts = numpy.linspace( min(time), max(time), 100 )
look_back_t = ts[1] - ts[0]
for t in ts:
	inj = filter(lambda th: abs(th[0] - t) < look_back_t and th[0] < t, zip( time, hrss ) )
	ninj = len(inj)
	power = sum( [ h**2 for t, h in inj if not math.isnan(h) ] )
	r_t.append( ninj / look_back_t )
	p_t.append( power )

pylab.figure()
pylab.grid()
pylab.xlim( min(time), max(time) )
pylab.plot( ts, r_t, 'k-' )
pylab.scatter( ts, r_t, c=numpy.log10(p_t), s=10, label="Total injection hrss (%d s)" % look_back_t )

pylab.legend()
cb = pylab.colorbar()
cb.set_label( "$\log_{10}{h_{rss}}$" )
pylab.xlabel( "GPS Time" )
pylab.ylabel( "Injection Rate (s)" )
pylab.title( "Injection statistics" )
pylab.savefig( "injstat.png" )

pylab.figure()
pylab.grid()
pylab.scatter( ra, dec, c=psi, s=10 )
pylab.xlim( 0, 2*numpy.pi )
pylab.ylim( -numpy.pi/2, numpy.pi/2 )

cb = pylab.colorbar()
cb.set_label( "Polarization angle $\psi$" )
pylab.xlabel( "Right Ascension (RA, rad)" )
pylab.ylabel( "Declination (dec, rad)" )
pylab.title( "Sky location and Polarization Angle" )
pylab.savefig( "skystat.png" )

tables = lsctables.getTablesByType( xmldoc, lsctables.SimBurstTable )
tables = filter( lambda t: t.waveform == "SineGaussian", tables[0] )
time = [ simburst.time_geocent_gps for simburst in tables ]
q  = [ simburst.q for simburst in tables]
fcent = [ simburst.frequency for simburst in tables ]
hrss = [ simburst.hrss for simburst in tables ]

markers = ['o', 's', '^', 'V', '*' ]
inj_types = set( q )
inj_mark = dict( zip(inj_types, markers) )

# TF plot
pylab.figure()
pylab.grid()
pylab.xlim( min(time), max(time) )
pylab.ylim( 10, 3000 )
pylab.semilogy()
#pylab.scatter( time, flow, c=numpy.log10(hrss), s=4 )

#organize injections
for itype, m in inj_mark.iteritems():

	inj_time, inj_freq, inj_hrss = [], [], []
	for t, f, qi, h in zip( time, fcent, q, hrss ):
		if( qi != itype ): continue
		inj_time.append( t )
		inj_freq.append( f )
		inj_hrss.append( h )

	title = "SG q=%d" % itype
	pylab.scatter( inj_time, inj_freq, 
		c=numpy.log10(inj_hrss), edgecolor='none', s=10, marker=m, label=title )

cb = pylab.colorbar()
cb.set_label( "$\log_{10}{h_{rss}}$" )
pylab.legend()
pylab.xlabel( "GPS Time" )
pylab.ylabel( "Frequency (lower, Hz)" )
pylab.title( "SG Injections during ER1" )

#for t, b, d, f, h in zip(time, bandwidth, duration, flow, hrss):
	#pylab.bar( t, b, d, f ) #, color = h, edgecolor = h )

pylab.savefig( "hrss_time_sg.png" )

# TF plot
pylab.figure()
pylab.grid()
pylab.xlim( min(time), max(time) )
pylab.ylim( min(hrss), max(hrss) )
pylab.semilogy()

#organize injections
for itype, m in inj_mark.iteritems():

	inj_time, inj_freq, inj_hrss = [], [], []
	for t, f, qi, h in zip( time, fcent, q, hrss ):
		if( qi != itype ): continue
		inj_time.append( t )
		inj_freq.append( f )
		inj_hrss.append( h )

	title = "SG q=%d" % itype
	pylab.scatter( inj_time, inj_hrss, 
		c=inj_freq, s=10, edgecolor='none', marker=m, label=title )

cb = pylab.colorbar()
cb.set_label( "Center Frequency" )
pylab.legend()
pylab.xlabel( "GPS Time" )
pylab.ylabel( "$h_{rss}$" )
pylab.title( "SineGaussian Injections during ER1" )

pylab.savefig( "hrss_freq_sg.png" )

tables = lsctables.getTablesByType( xmldoc, lsctables.SimBurstTable )
tables = filter( lambda t: t.waveform == "BTLWNB", tables[0] )
time = [ simburst.time_geocent_gps for simburst in tables ]
bandwidth = [ numpy.round(simburst.bandwidth) for simburst in tables ]
duration  = [ numpy.round(1e3*simburst.duration) for simburst in tables ]
flow = [ numpy.round(simburst.frequency) for simburst in tables ]
hrss = [ simburst.hrss for simburst in tables ]


markers = ['o', 'v', '^', 's', '*' ]
inj_types = set( zip(flow,bandwidth,duration) )
inj_mark = dict( zip(inj_types, markers) )

# TF plot
pylab.figure()
pylab.grid()
pylab.xlim( min(time), max(time) )
pylab.ylim( 10, 3000 )
pylab.semilogy()
#pylab.scatter( time, flow, c=numpy.log10(hrss), s=4 )

#organize injections
for itype, m in inj_mark.iteritems():

	inj_time, inj_freq, inj_hrss = [], [], []
	for t, f, b, d, h in zip( time, flow, bandwidth, duration, hrss ):
		if( (f, b, d) != itype ): continue
		inj_time.append( t )
		inj_freq.append( f )
		inj_hrss.append( h )

	title = "WNB $f_{low}$ %d $\Delta f$ %d, $\Delta t$ %0.2f" % itype 
	pylab.scatter( inj_time, inj_freq, 
		edgecolors='none',
		c=numpy.log10(inj_hrss), s=10, marker=m, label=title )

cb = pylab.colorbar()
cb.set_label( "$\log_{10}{h_{rss}}$" )
pylab.legend()
pylab.xlabel( "GPS Time" )
pylab.ylabel( "Frequency (lower, Hz)" )
pylab.title( "WNB Injections during ER1" )

#for t, b, d, f, h in zip(time, bandwidth, duration, flow, hrss):
	#pylab.bar( t, b, d, f ) #, color = h, edgecolor = h )

pylab.savefig( "hrss_time_wnb.png" )

# TF plot
pylab.figure()
pylab.grid()
pylab.xlim( min(time), max(time) )
pylab.ylim( min(hrss), max(hrss) )
pylab.semilogy()

#organize injections
for itype, m in inj_mark.iteritems():

	inj_time, inj_freq, inj_hrss = [], [], []
	for t, f, b, d, h in zip( time, flow, bandwidth, duration, hrss ):
		if( (f, b, d) != itype ): continue
		inj_time.append( t )
		inj_freq.append( f )
		inj_hrss.append( h )

	title = "WNB $f_{low}$ %d $\Delta f$ %d, $\Delta t$ %d (ms)" % itype 
	pylab.scatter( inj_time, inj_hrss, edgecolors='none', s=10, marker=m, label=title )

#cb = pylab.colorbar()
#cb.set_label( "Lower Frequency" )
pylab.legend()
pylab.xlabel( "GPS Time" )
pylab.ylabel( "$h_{rss}$" )
pylab.title( "WNB Injections during ER1" )

#for t, b, d, f, h in zip(time, bandwidth, duration, flow, hrss):
	#pylab.bar( t, b, d, f ) #, color = h, edgecolor = h )

pylab.savefig( "hrss_freq_wnb.png" )
