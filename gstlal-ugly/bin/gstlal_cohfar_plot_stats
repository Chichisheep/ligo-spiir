#! /usr/bin/env python
#
# Copyright (C) 2016 Qi Chu
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import os
import numpy as np
import scipy
import math
import csv
import logging
from optparse import OptionParser
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot

from gstlal.postcoh_table_def import PostcohInspiralTable
from glue.ligolw import ligolw, lsctables, array, param, utils, types
from pylal import datatypes as laltypes
from pylal import git_version
import pdb

Attributes = ligolw.sax.xmlreader.AttributesImpl

# FIXME:  require calling code to provide the content handler
class DefaultContentHandler(ligolw.LIGOLWContentHandler):
	pass
array.use_in(DefaultContentHandler)
param.use_in(DefaultContentHandler)
lsctables.use_in(DefaultContentHandler)


def array_from_xml(filename, array_name, contenthandler = DefaultContentHandler, verbose = False):

	# Load document
	xmldoc = utils.load_filename(filename, contenthandler = contenthandler, verbose = verbose)

	for root in (elem for elem in xmldoc.getElementsByTagName(ligolw.LIGO_LW.tagName) if elem.hasAttribute(u"Name") and elem.Name == "gstlal_spiir_cohfar"):
		result = array.get_array(root, array_name).array 
	return result

def postcoh_table_from_xml(filename, contenthandler = DefaultContentHandler, verbose = False):

	# Load document
	xmldoc = utils.load_filename(filename, contenthandler = contenthandler, verbose = verbose)

	postcoh = PostcohInspiralTable.get_table(xmldoc)
	return postcoh

def append_missing_options(missing_options, options, option):
	if getattr(options, option) is None:
		missing_options.append("--%s" % option.replace("_", "-"))


def parse_command_line():
	parser = OptionParser(version = git_version.verbose_msg, usage = "%prog [options] [file ...]", description = "%prog to plot pdf and cdf")
	parser.add_option("--output-filename", default = "", metavar = "name", help = "Set the output file name")
	parser.add_option("--input-stats-filename", default = "", metavar = "name", help = "Set the input stats file name")
	parser.add_option("--zerolag-format", default = "", metavar = "name", help = "format support, single | multi")
	parser.add_option("--cohsnr", type = "float", help = "if format is single, read the cohsnr")
	parser.add_option("--cmbchisq", type = "float", help = "if format is single, read the combined chisq")
	parser.add_option("--input-zerolag-filename", default = "", metavar = "name", help = "Set the input stats file name")
	parser.add_option("--ifos", metavar = "name", help = "set the ifos to plot pdf and cdf")
	options, tmp = parser.parse_args()

	missing_options = []
	append_missing_options(missing_options, options, "output_filename")
	append_missing_options(missing_options, options, "input_stats_filename")
	if options.zerolag_format == "single":
		append_missing_options(missing_options, options, "cohsnr")
		append_missing_options(missing_options, options, "cmbchisq")

	if missing_options:
		raise ValueError, "missing required option(s) %s" % ", ".join(sorted(missing_options))

	return options

options = parse_command_line()

if options.ifos == "L1H1":
	ifos = "H1L1"
pdf_name = "background_pdf:%s_lgsnr_lgchisq:array" % ifos
cdf_name = "background_cdf:%s_lgsnr_lgchisq:array" % ifos

# pdf not needed now
#pdf = array_from_xml(options.input_stats_filename, pdf_name)
#figpdf = pyplot.figure()
#ax = fig.add_axes((.6,2.5,-0.5,2.5))
#pyplot.imshow(pdf, extent = [0.6, 2.5, -0.5, 2.5], origin = 'lower')
#pyplot.xlabel('log10(CohSNR)')	
#pyplot.ylabel('log10(CombinedChisq)')	
#pyplot.title('PDF')
#pyplot.savefig("pdf_%s" % options.output_filename_suffix)

cdf = array_from_xml(options.input_stats_filename, cdf_name)
log10cdf = np.log10(cdf)
pyplot.figure()
#ax = fig.add_axes((.6,2.5,-0.5,2.5))
x = np.arange(0.6, 2.5, 0.01)
y = np.arange(-0.5, 2.5, 0.01)
X, Y = np.meshgrid(x, y)
im = pyplot.imshow(log10cdf, extent = [0.6, 2.5, -0.5, 2.5], origin = 'lower')
levels = np.arange(-10, -1, 2)
CS = pyplot.contour(log10cdf, levels, origin = 'lower', extent = (0.6, 2.5, -0.5, 2.5))
#pyplot.clabel(CS, levels, inline=1, fontsize = 9)
CB = pyplot.colorbar(CS, shrink = 0.8, extend = 'both')
if options.zerolag_format == "multi":
	zerolags = postcoh_table_from_xml(options.input_zerolag_filename)
	log10cohsnr = np.log10(zerolags.getColumnByName("cohsnr"))
	log10chisq = np.log10(zerolags.getColumnByName("chisq"))
else:
	log10cohsnr = np.log10(options.cohsnr)
	log10chisq = np.log10(options.cmbchisq)

CM = pyplot.scatter(log10cohsnr, log10chisq, color = 'k', marker = 'o', s = 10, facecolors = 'none')
pyplot.xlabel('log10(CohSNR)')	
pyplot.ylabel('log10(CombinedChisq)')	
pyplot.title('FAP')
pyplot.savefig(options.output_filename)

