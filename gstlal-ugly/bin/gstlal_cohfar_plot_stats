#! /usr/bin/env python
import os
import numpy as np
import scipy
import math
import csv
import logging
from optparse import OptionParser
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot

from gstlal.postcoh_finalsink import PostcohInspiralTable
from glue.ligolw import ligolw, lsctables, array, param, utils, types
from pylal import datatypes as laltypes
from pylal import git_version
import pdb

Attributes = ligolw.sax.xmlreader.AttributesImpl

# FIXME:  require calling code to provide the content handler
class DefaultContentHandler(ligolw.LIGOLWContentHandler):
	pass
array.use_in(DefaultContentHandler)
param.use_in(DefaultContentHandler)
lsctables.use_in(DefaultContentHandler)


def array_from_xml(filename, array_name, contenthandler = DefaultContentHandler, verbose = False):

	# Load document
	xmldoc = utils.load_filename(filename, contenthandler = contenthandler, verbose = verbose)

	for root in (elem for elem in xmldoc.getElementsByTagName(ligolw.LIGO_LW.tagName) if elem.hasAttribute(u"Name") and elem.Name == "gstlal_spiir_cohfar"):
		result = array.get_array(root, array_name).array 
	return result

def postcoh_table_from_xml(filename, contenthandler = DefaultContentHandler, verbose = False):

	# Load document
	xmldoc = utils.load_filename(filename, contenthandler = contenthandler, verbose = verbose)

	postcoh = PostcohInspiralTable.get_table(xmldoc)
	return postcoh



def parse_command_line():
	parser = OptionParser(version = git_version.verbose_msg, usage = "%prog [options] [file ...]", description = "%prog to plot pdf and cdf")
	parser.add_option("--output-filename-suffix", default = "", metavar = "name", help = "Set the output file suffix name")
	parser.add_option("--input-stats-filename", default = "", metavar = "name", help = "Set the input stats file name")
	parser.add_option("--input-zerolag-filename", default = "", metavar = "name", help = "Set the input stats file name")
	parser.add_option("--ifos",  default = "append", metavar = "name", help = "set the ifos to plot pdf and cdf")
	opts, filenames = parser.parse_args()

	return opts

opts = parse_command_line()

pdf_name = "background_pdf:%s_logsnr_logchisq:array" % opts.ifos
cdf_name = "background_cdf:%s_logsnr_logchisq:array" % opts.ifos

pdf = array_from_xml(opts.input_stats_filename, pdf_name)
figpdf = pyplot.figure()
#ax = fig.add_axes((.6,2.5,-0.5,2.5))
pyplot.imshow(pdf, extent = [0.6, 2.5, -0.5, 2.5], origin = 'lower')
pyplot.xlabel('log10CohSNR')	
pyplot.ylabel('log10Chisq')	
pyplot.title('PDF')
pyplot.savefig("pdf_%s" % opts.output_filename_suffix)

cdf = array_from_xml(opts.input_stats_filename, cdf_name)
log10cdf = np.log10(cdf)
pyplot.figure()
#ax = fig.add_axes((.6,2.5,-0.5,2.5))
x = np.arange(0.6, 2.5, 0.01)
y = np.arange(-0.5, 2.5, 0.01)
X, Y = np.meshgrid(x, y)
im = pyplot.imshow(log10cdf, extent = [0.6, 2.5, -0.5, 2.5], origin = 'lower')
levels = np.arange(-10, -1, 2)
CS = pyplot.contour(log10cdf, levels, origin = 'lower', extent = (0.6, 2.5, -0.5, 2.5))
#pyplot.clabel(CS, levels, inline=1, fontsize = 9)
CB = pyplot.colorbar(CS, shrink = 0.8, extend = 'both')

zerolags = postcoh_table_from_xml(opts.input_zerolag_filename)
log10cohsnr = np.log10(zerolags.getColumnByName("cohsnr"))
log10chisq = np.log10(zerolags.getColumnByName("chisq"))

CM = pyplot.scatter(log10cohsnr, log10chisq, color = 'k', marker = 'o', facecolors = 'none')

pyplot.xlabel('log10CohSNR')	
pyplot.ylabel('log10Chisq')	
pyplot.title('CDF')
pyplot.savefig("cdf_%s" % opts.output_filename_suffix)

