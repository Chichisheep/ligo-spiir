#!/usr/bin/env python
#
# Copyright (C) 2017  Qi Chu
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import numpy
from optparse import OptionParser
from gstlal.spiirbank.cbc_template_iir import matched_filt
import pdb

import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot

parser = OptionParser(description=__doc__)

parser.add_option(
    "--template-fname",
    metavar="filename",
    help="Set the filename in which to save the template bank (required).")
parser.add_option(
    "--data-fname",
    metavar="filename",
    help="Set the filename in which to save the data (required).")
parser.add_option(
    "--sampleRate",
    metavar="Hz",
    type="float",
    default=4096.0,
    help="Set the sample rate of the IIR template bank (optional).")
parser.add_option(
    "--snr-prefix",
    metavar="filename",
    default=None,
    help=
    "Set the filename in which to save the snr series plot, if not set, will not store the plot and snr txt series."
)
parser.add_option(
    "--data-prefix",
    metavar="filename",
    default=None,
    help=
    "Set the filename in which to save the snr series plot, if not set, will not store the plot and snr txt series."
)
parser.add_option("-v",
                  "--verbose",
                  action="store_true",
                  help="Be verbose (optional).")
options, filenames = parser.parse_args()

template = numpy.loadtxt(options.template_fname).view(complex)
data = numpy.loadtxt(options.data_fname, usecols=(0, 1))  # gps_time, value
snr, sigma, indmax, timemax, f_ticks, data_fft, template_fft = matched_filt(
    template, data, sampleRate=options.sampleRate)
if options.verbose:
    print "max snr is %f, sigma %f, indmax %f, timemax %.9f" % (max(
        abs(snr)), sigma, indmax, timemax)

if options.snr_prefix:
    pyplot.figure()
    time = data[:, 0] - timemax
    idx_start = min(numpy.where((abs(snr)) > 0)[0])
    idx_end = min(max(numpy.where((abs(snr)) > 0)[0]), len(time))
    time = time[idx_start:idx_end]
    snr = snr[idx_start:idx_end]

    p1 = pyplot.plot(time, snr)
    pyplot.xlabel("Time since {0:.9f}".format(timemax))
    pyplot.savefig("%s.svg" % options.snr_prefix, format="svg", dpi=1200)
    numpy.savetxt("%s.txt" % options.snr_prefix, snr.view(float))

    pyplot.figure()
    fig, axs = pyplot.subplots(2, 1)
    fig.subplots_adjust(hspace=.5)
    axs[0].plot(f_ticks, abs(data_fft))
    axs[0].set_ylabel("data f")
    axs[0].set_xlabel("Hz")
    axs[1].plot(f_ticks, abs(template_fft))
    axs[1].set_ylabel("template f")
    axs[1].set_xlabel("Hz")
    pyplot.savefig("%s_fft.svg" % options.data_prefix, format="svg", dpi=1200)
