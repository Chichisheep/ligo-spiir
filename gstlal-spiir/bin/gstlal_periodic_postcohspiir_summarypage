#!/usr/bin/env python
#
# Copyright (C) 2018 Qi Chu,
# modified from gstlal_inspiral
# Copyright (C) 2009-2014	Kipp Cannon, Chad Hanna, Drew Keppel
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA	02110-1301, USA.

#
# =============================================================================
#
#																 Command Line
#
# =============================================================================
#
from optparse import OptionParser
import os
import time
import subprocess
from gstlal.workflow import utils as workflow_utils

def call_combo_and_plotsummary(ifos, output_path, usertag, zerolag_list, common_start, common_duration, segements_name, segmentxml, backgroundxml = None, injxml = None, tmpspace = None, verbose = False):
	cmd = []
	cmd += ["gstlal_inspiral_postcohspiir_combo_plotsummary"]
	cmd += ["--outpath", output_path]
	cmd += ["--ifos", ifos]
	cmd += ["--usertag", usertag]
	cmd += ["--pipeline-output-zerolag", ','.join(zerolag_list)]
	cmd += ["--common-start", str(common_start)]
	cmd += ["--common-duration", str(common_duration)]
	cmd += ["--segmentxml", segmentxml]
	if backgroundxml:
		cmd += ["--pipeline-output-background", backgroundxml]
	if tmpspace:
		cmd += ["--tmp-space", tmpspace]
	if injxml:
		cmd += ["--injxml", injxml]
	if verbose:
		cmd += ["--verbose"]
		print cmd
	proc = subprocess.Popen(cmd)
	proc.wait()


def call_summarypage(output_path, usertags, webserver_dir, open_box = False, title = "Postcohspiir daily", verbose = False):
	cmd = []
	cmd += ["gstlal_inspiral_postcohspiir_summarypage"]
	cmd += ["--glob-path", output_path]
	cmd += ["--webserver-dir", webserver_dir]
	for one_tag in usertags:
		cmd += ["--output-user-tag", one_tag]
	cmd += ["--title", title]
	if open_box:
		cmd += ["--open-box"]
	if verbose:
		print cmd
	proc = subprocess.Popen(cmd)
	proc.wait()

	
def parse_command_line():
	parser = OptionParser(usage = "%prog [options] [file ...]", description = "%prog summary web page")
	parser.add_option("--noninj-outdirs", metavar = "000/zerolag.xmlgz,001/zerolag.xml.gz", default = None, help = "Pipeline output names (required)")
	parser.add_option("--inj-outdirs", metavar = "000/zerolag.xmlgz,001/zerolag.xml.gz", default = None, help = "Pipeline output names (required)")
	parser.add_option("--segments-name", metavar = "name", default = "postcohprocessed", help = "Set the name of the segment name (optional).")
	parser.add_option("--injxml", metavar = "filename", default = None, help = "Set the name of the inj xml name (required).")
	parser.add_option("--ifos", metavar = "H1L1V1", help = "Set the name of the inj xml name (required).")
	parser.add_option("-t", "--tmp-space", metavar = "path", help = "Path to a directory suitable for use as a work area while manipulating the database file.  The database file will be worked on in this directory, and then moved to the final location when complete.  This option is intended to improve performance when running in a networked environment, where there might be a local disk with higher bandwidth than is available to the filesystem on which the final output will reside.")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	parser.add_option("--webserver-dir", help = "Set the directory for the webserver.  Required.  Example /archive/home/channa/public_html/highmass_months_23-24_summary_page")
	parser.add_option("--open-box", action = "store_true", help = "Produce open box page")
	parser.add_option("--title", default="gstlal_inspiral offline analysis")


	options, tmp = parser.parse_args()

	required_options = ["inj_outdirs", "noninj_outdirs", "injxml", "ifos"]
	missing_options = []
	missing_options += ["--%s" % option.replace("_", "-") for option in required_options if getattr(options, option) is None]
	if missing_options:
		raise ValueError, "missing required option(s) %s" % ", ".join(sorted(missing_options))


	return options

options = parse_command_line()
noninj_outdirs = options.noninj_outdirs.split(',')
noninj_ndir = len(noninj_outdirs)
inj_outdirs  = options.inj_outdirs.split(',')
inj_ndir = len(inj_outdirs)
assert noninj_ndir == inj_ndir

last_inj_zerolag_list = ["nothing" for i in range(0, inj_ndir)]
last_inj_segment_list = ["nothing" for i in range(0, inj_ndir)]


while True:
	# get new zerolags from all inj directories, check if segment is ready
	latest_inj_zerolag_list = [workflow_utils.get_latest_online_output(one_outdir, "zerolag") for one_outdir in inj_outdirs]
	
	latest_inj_segment_list = [workflow_utils.get_latest_online_output(one_outdir, "SEGMENTS") for one_outdir in inj_outdirs]
	# get new zerolags from all noninj directories
	latest_noninj_zerolag_list = [workflow_utils.get_latest_online_output(one_outdir, "zerolag") for one_outdir in noninj_outdirs]
	
	latest_noninj_segment_list = [workflow_utils.get_latest_online_output(one_outdir, "SEGMENTS") for one_outdir in noninj_outdirs]
	
	all_zerolag_ok = sum([latest_inj_zerolag_list[idx] != last_inj_zerolag_list[idx] for idx in range(0, inj_ndir)])
	all_segment_ok = sum([latest_inj_segment_list[idx] != last_inj_segment_list[idx] for idx in range(0, inj_ndir)])
	if all_zerolag_ok == inj_ndir and all_segment_ok == inj_ndir:
		# extract injections only from matched inj latest time range
		latest_time_range = [workflow_utils.get_start_end_time(one_zerolag) for one_zerolag in latest_inj_zerolag_list]
		common_start = min([latest_time_range[idx][0] for idx in range(0, inj_ndir)])
		common_end = max([latest_time_range[idx][1] for idx in range(0, inj_ndir)])
		common_duration = int(common_end) - int(common_start)
		outinjxml = None

		output_path = "%d_%d" % (common_start, common_duration)
		try:
			os.mkdir(output_path)
		except:
			pass

		inj_usertag = "inj0"
		call_combo_and_plotsummary(options.ifos, output_path, inj_usertag, latest_inj_zerolag_list, common_start, common_duration, options.segments_name, latest_inj_segment_list[0], injxml = options.injxml, tmpspace = options.tmp_space, verbose = options.verbose)
		# extract noninj zerolags only from noninj latest time range
		latest_time_range = [workflow_utils.get_start_end_time(one_zerolag) for one_zerolag in latest_noninj_zerolag_list]
		common_start = min([latest_time_range[idx][0] for idx in range(0, noninj_ndir)])
		common_end = max([latest_time_range[idx][1] for idx in range(0, noninj_ndir)])
		common_duration = int(common_end) - int(common_start)
		noninj_usertag = str(common_start)

		# get background margi_stats xmls from each directory

		latest_noninj_background_list = [workflow_utils.get_latest_online_output(one_outdir, "w") for one_outdir in noninj_outdirs]
		call_combo_and_plotsummary(options.ifos, output_path, noninj_usertag, latest_noninj_zerolag_list, common_start, common_duration, options.segments_name, latest_noninj_segment_list[0], backgroundxml = ','.join(latest_noninj_background_list), tmpspace = options.tmp_space, verbose = options.verbose)
		usertags = [noninj_usertag, inj_usertag]
		webserver_dir= "%s/%d" % (options.webserver_dir, common_start)
		call_summarypage(output_path, usertags, webserver_dir, open_box = options.open_box, title = options.title, verbose = options.verbose)
	last_inj_zerolag_list = latest_inj_zerolag_list
	latest_inj_zerolag_list = []

	# sleep 10mins
	time.sleep(600)
